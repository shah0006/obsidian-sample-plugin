import { App, normalizePath } from "obsidian";
import { TagHierarchyModel, TagNode } from "../models/TagModel";
import { handleError } from "../utils/ErrorHandler";
import { TagHierarchySettings } from "../settings/SettingsTab";

export class FileService {
    private app: App;
    private model: TagHierarchyModel;
    private settings: TagHierarchySettings;

    constructor(app: App, settings: TagHierarchySettings) {
        this.app = app;
        this.model = new TagHierarchyModel();
        this.settings = settings;
    }

    async generateMarkdownFile(): Promise<void> {
        try {
            const content = this.generateMarkdownContent();
            const filePath = normalizePath(this.settings.markdownFilePath);

            await this.app.vault.adapter.write(filePath, content);

            console.log("Tag hierarchy markdown file generated successfully");

        } catch (error) {
            handleError(error, "Error generating tag hierarchy markdown file.");
        }
    }


    generateMarkdownContent(): string {
        let content = "# Vault Tag Hierarchy\n\n";
        content += "This file was automatically generated by the Tag Hierarchy plugin.\n\n";
        content += `Last updated: ${new Date().toLocaleString()}\n\n`;

        const rootTags = this.model.getRootTags();
        for (const tag of rootTags.values()) {
            content += this.generateMarkdownForLevel(tag, 0);
        }

        return content;
    }


    private generateMarkdownForLevel(tag: TagNode, level: number): string {
        let content = "";
        const indent = "  ".repeat(level);

        if (this.settings.showTagCount) {
            content += `${indent}- #${tag.path} (${tag.count})\n`;
        } else {
            content += `${indent}- #${tag.path}\n`;
        }


        const sortedChildren = new Map([...tag.children.entries()].sort());

        for (const child of sortedChildren.values()) {
            content += this.generateMarkdownForLevel(child, level + 1);
        }

        return content;
    }

    setModel(model: TagHierarchyModel): void {
        this.model = model;
    }
}
